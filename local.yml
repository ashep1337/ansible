---
- name: Install zsh and configure for all users
  hosts: local
  become: true

  vars:
    zshrc_path: ".zshrc"  # Path relative to playbook's files/ directory

  tasks:

    - name: Ensure required packages are installed
      apt:
        name:
          - git
          - zsh
          - btop
          - wget
          - curl
          - nala
        state: latest
        update_cache: yes

    - name: Clone zsh-syntax-highlighting
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: /usr/share/zsh-syntax-highlighting
        update: yes

    - name: Clone zsh-autosuggestions
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: /usr/share/zsh-autosuggestions
        update: yes

    - name: Get list of local users (UID â‰¥ 1000 and valid shell)
      command: >
        awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd
      register: local_users_raw
      changed_when: false

    - name: Set fact for user list
      set_fact:
        local_users: "{{ local_users_raw.stdout_lines }}"

    - name: Deploy .zshrc config for each user
      copy:
        src: "{{ zshrc_path }}"
        dest: "/home/{{ item }}/.zshrc"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ local_users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set zsh as default shell for each user
      user:
        name: "{{ item }}"
        shell: /usr/bin/zsh
      loop: "{{ local_users }}"

- name: Deploy KDE keyboard shortcuts to all local users
  hosts: local
  become: true

  vars:
    shortcut_file: kglobalshortcutsrc
    users: "{{ lookup('pipe', \"awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd\") | split('\n') }}"

  tasks:

    - name: Ensure .config directory exists for each user
      file:
        path: "/home/{{ item }}/.config"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0755'
      loop: "{{ users }}"
      when: item != 'nobody'

    - name: Deploy custom kglobalshortcutsrc for each user
      copy:
        src: "{{ shortcut_file }}"
        dest: "/home/{{ item }}/.config/kglobalshortcutsrc"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      when: item != 'nobody'

    - name: Reload KDE shortcuts via qdbus if X11 session active
      become: false
      shell: |
        qdbus org.kde.kglobalaccel /component/org.kde.konsole reloadConfig || true
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/{{ item }}/.Xauthority"
      loop: "{{ users }}"

- name: Set KDE Plasma wallpaper for all users
  hosts: local
  become: true

  vars:
    wallpaper_path: "/usr/share/wallpapers/my_wallpaper.jpg"

  tasks:

    - name: Get list of users with home directories
      command: >
        awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd
      register: local_users_raw
      changed_when: false

    - name: Set fact with list of users
      set_fact:
        local_users: "{{ local_users_raw.stdout_lines }}"

    - name: Ensure wallpaper exists on remote
      copy:
        src: files/wallpaper.jpg
        dest: "{{ wallpaper_path }}"
        mode: '0644'

    - name: Modify Plasma config to set wallpaper for each user
      lineinfile:
        path: "/home/{{ item }}/.config/plasma-org.kde.plasma.desktop-appletsrc"
        regexp: '^Image='
        line: "Image=file://{{ wallpaper_path }}"
        create: yes
      become_user: "{{ item }}"
      loop: "{{ local_users }}"

    - name: Restart Plasma Shell to apply wallpaper for each user
      shell: |
        qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript \
          "var allDesktops = desktops(); for (i=0;i<allDesktops.length;i++) { d = allDesktops[i]; d.wallpaperPlugin = 'org.kde.image'; d.currentConfigGroup = Array('Wallpaper', 'org.kde.image', 'General'); d.writeConfig('Image', 'file://{{ wallpaper_path }}') }"
      become_user: "{{ item }}"
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/{{ item }}/.Xauthority"
      loop: "{{ local_users }}"

- name: Install CaskaydiaMono Nerd Font system-wide
  hosts: local
  become: true

  vars:
    nerd_font_url: "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/CascadiaCode.zip"
    font_temp_dir: "/tmp/nerd-fonts"
    font_dest_dir: "/usr/share/fonts/truetype/caskaydia"

  tasks:

    - name: Ensure font destination directory exists
      file:
        path: "{{ font_dest_dir }}"
        state: directory
        mode: '0755'

    - name: Create temporary font download directory
      file:
        path: "{{ font_temp_dir }}"
        state: directory
        mode: '0755'

    - name: Download CaskaydiaMono Nerd Font zip
      get_url:
        url: "{{ nerd_font_url }}"
        dest: "{{ font_temp_dir }}/CaskaydiaCove.zip"
        mode: '0644'

    - name: Unzip font archive
      unarchive:
        src: "{{ font_temp_dir }}/CaskaydiaCove.zip"
        dest: "{{ font_dest_dir }}"
        remote_src: yes
        creates: "{{ font_dest_dir }}/CaskaydiaCove Nerd Font Complete Mono.ttf"

    - name: Set correct permissions on font files
      file:
        path: "{{ font_dest_dir }}"
        recurse: yes
        owner: root
        group: root
        mode: '0644'

    - name: Refresh font cache
      command: fc-cache -f -v

- name: Configure KDE font and keybindings per user
  hosts: local
  become: true
  vars:
    font_family: "Caskaydia Mono"
    font_size: "10"
    shortcut_file: kglobalshortcutsrc  # Must be present in playbook's `files/` directory

  tasks:
    - name: Get list of local users with valid shells
      command: >
        awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd
      register: local_users_raw
      changed_when: false

    - name: Set fact with list of users
      set_fact:
        local_users: "{{ local_users_raw.stdout_lines }}"

    - name: Ensure .config exists for each user
      file:
        path: "/home/{{ item }}/.config"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0755'
      loop: "{{ local_users }}"

    - name: Set KDE font for each user
      lineinfile:
        path: "/home/{{ item }}/.config/kdeglobals"
        create: yes
        regexp: '^font='
        line: "font={{ font_family }},{{ font_size }},-1,5,50,0,0,0,0,0"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ local_users }}"
      become_user: "{{ item }}"

    - name: Deploy KDE global shortcuts for each user
      copy:
        src: "{{ shortcut_file }}"
        dest: "/home/{{ item }}/.config/kglobalshortcutsrc"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ local_users }}"

    - name: Reload KDE shortcuts via qdbus (per user)
      shell: |
        qdbus org.kde.kglobalaccel /component/org.kde.konsole reloadConfig || true
      environment:
        DISPLAY: ":0"
        XAUTHORITY: "/home/{{ item }}/.Xauthority"
      become: false
      loop: "{{ local_users }}"
      ignore_errors: true

    - name: Fallback Reload KDE shortcuts as root with runuser
      shell: |
        runuser -l {{ item }} -c 'DISPLAY=:0 XAUTHORITY=/home/{{ item }}/.Xauthority qdbus org.kde.kglobalaccel /component/org.kde.konsole reloadConfig || true'
      loop: "{{ local_users }}"
      ignore_errors: true

- name: Install Dracula KDE themes (global, icons, cursors, window decorations, plasma styles)
  hosts: local
  become: true
  vars:
    global_theme_name: "Dracula-purple"
    icon_theme_name: "dracula-icons-main"
    cursor_theme_name: "Dracula-cursors"
    window_deco_name: "Dracula-kde-solid"
    plasma_style_name: "Dracula-Solid"

  tasks:
    - name: Ensure KDE theme directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "/usr/share/plasma/look-and-feel"
        - "/usr/share/icons"
        - "/usr/share/icons/default"
        - "/usr/share/icons/breeze_cursors"
        - "/usr/share/plasma/desktoptheme"
        - "/usr/share/aurorae/themes"
        - "/usr/share/color-schemes"
        - "/usr/share/kwin"
        - "/usr/share/kwin/decoration"

    - name: Copy Dracula global theme
      copy:
        src: "Dracula-purple/"
        dest: "/usr/share/plasma/look-and-feel/Dracula-purple/"
        owner: root
        group: root
        mode: '0755'

    - name: Copy Dracula icons
      copy:
        src: "dracula-icons-main/"
        dest: "/usr/share/icons/dracula-icons-main/"
        owner: root
        group: root
        mode: '0755'

    - name: Copy Dracula cursors
      copy:
        src: "Dracula-cursors/"
        dest: "/usr/share/icons/Dracula-cursors/"
        owner: root
        group: root
        mode: '0755'

    - name: Copy Dracula color scheme
      copy:
        src: "Dracula-kde.colors"
        dest: "/usr/share/color-schemes/"
        owner: root
        group: root
        mode: '0644'

    - name: Copy Dracula Plasma Style (Dracula-Solid)
      copy:
        src: "Dracula-Solid/"
        dest: "/usr/share/plasma/desktoptheme/Dracula-Solid/"
        owner: root
        group: root
        mode: '0755'

    - name: Copy Dracula window decoration theme
      copy:
        src: "Dracula-kde-solid/"
        dest: "/usr/share/aurorae/themes/Dracula-kde-solid/"
        owner: root
        group: root
        mode: '0755'

- name: Apply KDE theme settings for each user, including Plasma Style and Window Decoration
  hosts: local
  become: true
  vars:
    global_theme: "Dracula-purple"
    icon_theme: "dracula-icons-main"
    cursor_theme: "Dracula-cursors"
    plasma_style: "Dracula-Solid"
    window_deco: "Dracula-kde-solid"

  tasks:
    - name: Get list of local users
      command: >
        awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd
      register: local_users_raw
      changed_when: false

    - name: Set fact for users
      set_fact:
        users: "{{ local_users_raw.stdout_lines }}"

    - name: Ensure .config directory exists
      file:
        path: "/home/{{ item }}/.config"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0755'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set LookAndFeel to Dracula
      lineinfile:
        path: "/home/{{ item }}/.config/kdeglobals"
        regexp: '^LookAndFeelPackage='
        line: "LookAndFeelPackage={{ global_theme }}"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set IconTheme to Dracula
      lineinfile:
        path: "/home/{{ item }}/.config/kdeglobals"
        regexp: '^IconTheme='
        line: "IconTheme={{ icon_theme }}"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set CursorTheme to Dracula
      lineinfile:
        path: "/home/{{ item }}/.config/kcminputrc"
        regexp: '^cursorTheme='
        line: "cursorTheme={{ cursor_theme }}"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set ColorScheme to Dracula
      lineinfile:
        path: "/home/{{ item }}/.config/kdeglobals"
        regexp: '^ColorScheme='
        line: "ColorScheme=Dracula"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set Plasma Style (widgetStyle)
      lineinfile:
        path: "/home/{{ item }}/.config/kdeglobals"
        regexp: '^widgetStyle='
        line: "widgetStyle={{ plasma_style }}"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set Plasma Theme in plasmarc
      lineinfile:
        path: "/home/{{ item }}/.config/plasmarc"
        regexp: '^Theme='
        line: "Theme={{ plasma_style }}"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set Aurorae Window Decoration in kwinrc
      lineinfile:
        path: "/home/{{ item }}/.config/kwinrc"
        regexp: '^theme='
        line: "theme={{ window_deco }}"
        create: yes
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      loop_control:
        label: "{{ item }}"
