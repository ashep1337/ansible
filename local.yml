---
- name: Setup local system
  hosts: local
  become: true

  vars:
    zshrc_path: "zshrc"

  pre_tasks:
    - name: Install updates (Debian only)
      apt:
        upgrade: dist
        update_cache: yes
      when: ansible_distribution == "Debian"

  tasks:
    - name: Create 'ashep' user
      tags: always
      user:
        name: ashep
        groups: sudo

    - name: Add SSH key for 'ashep'
      tags: always
      authorized_key:
        user: ashep
        key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDYMXF2WqNoEUByTUKkU5CAtKiKX..."  # Complete your key here

    - name: Add 'ashep' to sudoers
      copy:
        src: sudoer_ashep
        dest: /etc/sudoers.d/ashep
        owner: root
        group: root
        mode: '0440'

    - name: Install packages (git, zsh, btop, wget, curl, nala)
      apt:
        name:
          - git
          - zsh
          - btop
          - wget
          - curl
          - nala
        state: latest
        update_cache: yes

    - name: Clone zsh-syntax-highlighting
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: /usr/share/zsh-syntax-highlighting
        update: yes

    - name: Clone zsh-autosuggestions
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: /usr/share/zsh-autosuggestions
        update: yes

    - name: Get list of local users (UID â‰¥ 1000 and valid shell)
      command: >
        awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd
      register: local_users_raw
      changed_when: false

    - name: Set fact for user list
      set_fact:
        local_users: "{{ local_users_raw.stdout_lines }}"

    - name: Deploy .zshrc config for each user
      copy:
        src: "{{ zshrc_path }}"
        dest: "/home/{{ item }}/.zshrc"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ local_users }}"
      loop_control:
        label: "{{ item }}"

    - name: Set zsh as default shell for each user
      user:
        name: "{{ item }}"
        shell: /usr/bin/zsh
      loop: "{{ local_users }}"

- name: Deploy KDE keyboard shortcuts to all local users
  hosts: local
  become: true

  vars:
    shortcut_file: kglobalshortcutsrc
    users: "{{ lookup('pipe', \"awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1 }' /etc/passwd\") | split('\n') }}"

  tasks:

    - name: Ensure .config directory exists for each user
      file:
        path: "/home/{{ item }}/.config"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0755'
      loop: "{{ users }}"
      when: item != 'nobody'

    - name: Deploy custom kglobalshortcutsrc for each user
      copy:
        src: "{{ shortcut_file }}"
        dest: "/home/{{ item }}/.config/kglobalshortcutsrc"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ users }}"
      when: item != 'nobody'

    - name: Deploy kdeglobals config
      copy:
        src: kdeglobals
        dest: "/home/{{ item }}/.config/"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ local_users }}"
      loop_control:
        label: "{{ item }}"

    - name: Deploy kwinrc config
      copy:
        src: kwinrc
        dest: "/home/{{ item }}/.config/"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0644'
      loop: "{{ local_users }}"
      loop_control:
        label: "{{ item }}"

    - name: Get username of interactive user
      shell: "awk -F: '$3 >= 1000 && $7 ~ /(bash|zsh|sh)$/ { print $1; exit }' /etc/passwd"
      register: interactive_user
      changed_when: false

    - name: Get UID of that user
      command: "id -u {{ interactive_user.stdout }}"
      register: user_uid
      changed_when: false

    - name: Copy wallpaper to /usr/share/wallpapers
      copy:
        src: wallpaper.jpg
        dest: /usr/share/wallpapers/wallpaper.jpg
        owner: root
        group: root
        mode: '0644'

    - name: Apply wallpaper using plasma-apply-wallpaperimage
      become: true
      command: plasma-apply-wallpaperimage /usr/share/wallpapers/wallpaper.jpg
      environment:
        DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ user_uid.stdout }}/bus"
        XDG_RUNTIME_DIR: "/run/user/{{ user_uid.stdout }}"
      become_user: "{{ interactive_user.stdout }}"

#    - name: Restart Plasma Shell to apply wallpaper for each user
#      shell: |
#        qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript \
#          "var allDesktops = desktops(); for (i=0;i<allDesktops.length;i++) { d = allDesktops[i]; d.wallpaperPlugin = 'org.kde.image'; d.currentConfigGroup = Array('Wallpaper', 'org.kde.image', 'General'); d.writeConfig('Image', 'file://{{ wallpaper_path }}') }"
#      become_user: "{{ item }}"
#      environment:
#        DISPLAY: ":0"
#        XAUTHORITY: "/home/{{ item }}/.Xauthority"
#      loop: "{{ local_users }}"

- name: Install CascadiaMono Nerd Font and Apply Breeze Dark Theme
  hosts: localhost
  become: true
  vars:
    font_url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/CascadiaMono.zip"
    font_dest_dir: "/usr/local/share/fonts/cascadiamono"
    font_temp_zip: "/tmp/CascadiaMono.zip"
    kde_user_config_dir: "/home/{{ ansible_user_id }}/.config"

  tasks:
    - name: Ensure unzip and fonts directory exist
      apt:
        name: unzip
        state: present
        update_cache: true

    - name: Create destination font directory
      file:
        path: "{{ font_dest_dir }}"
        state: directory
        mode: '0755'

    - name: Download CascadiaMono Nerd Font
      get_url:
        url: "{{ font_url }}"
        dest: "{{ font_temp_zip }}"

    - name: Unzip CascadiaMono Nerd Font
      unarchive:
        src: "{{ font_temp_zip }}"
        dest: "{{ font_dest_dir }}"
        remote_src: yes

    - name: Refresh font cache
      command: fc-cache -f -v

- name: Ensure 'ashep' has sudo privileges if logged-in user is ashep
  hosts: localhost
  become: true

  tasks:

    - name: Add sudo rule for ashep user
      copy:
        dest: /etc/sudoers.d/ashep
        content: "ashep ALL=(ALL:ALL) ALL\n"
        owner: root
        group: root
        mode: '0440'
        validate: '/usr/sbin/visudo -cf %s'



